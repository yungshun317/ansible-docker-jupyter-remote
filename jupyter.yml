---
- name: jupyter
  hosts: ccma
  gather_facts: no

  vars: 
    ansible_become_pass: "ccma"

  tasks:
    - name: Install Python 2.7
      become: yes
      raw: test -e /usr/bin/python || (apt -y update && apt install -y python-minimal)
      changed_when: False

    - name: Gather facts after Python is definitely present
      become: yes
      setup:

    - name: Install pip and docker.io
      become: yes
      apt:
        name: "{{ packages }}"
        state: present
      vars:
        packages:
          - python-pip
          - docker.io

    - name: Install Docker Python library
      become: yes
      pip:
        name: "{{ packages }}"
        state: present
      vars:
        packages:
          - docker

    - name: Add ccma to the docker group
      become: yes 
      shell: usermod -aG docker ccma
      register: ccma_to_docker

    - name: Reboot immediately if there was a change
      shell: "sleep 5 && reboot"
      async: 1
      poll: 0
      when: ccma_to_docker is changed

    - name: Wait for the reboot to complete if there was a change
      wait_for_connection:
        connect_timeout: 20
        sleep: 5
        delay: 5
        timeout: 300
      when: ccma_to_docker is changed

    - name: Ensure a directory exists for putting Dockerfile
      file:
        path: /home/ccma/notebook
        state: directory
        owner: ccma
        group: ccma
        mode: 0755

    - name: Copy Dockerfile to remote
      copy:
        src: "./notebook/Dockerfile"
        dest: /home/ccma/notebook/Dockerfile
        owner: ccma
        group: ccma
        mode: 0644

    - name: Build a Docker image from Dockerfile
      docker_image:
        name: "{{ item.name }}"
        tag: "{{ item.tag }}"
        path: "/home/ccma/{{ item.directory }}"
        state: build
      with_items:
        - { name: notebook, tag: "jupyter", directory: notebook }

    - name: Check for containers that actually exist
      shell: 'docker ps -aq --filter "name={{ item }}"'
      with_items: 
        - notebook
      register: found_containers

    - name: Remove the containers found by the above command
      shell: 'docker stop {{ item.item }} && docker rm -fv {{ item.item }}'
      with_items: '{{ found_containers.results }}'
      when: item.stdout

    - name: get UID
      shell: 'id -u ccma'
      register: get_uid

    - name: get GID
      shell: 'id -g ccma'
      register: get_gid

    - name: Create a directory for mounting host volume
      file:
        path: /home/ccma/workspace
        state: directory
        owner: ccma
        group: ccma
        mode: 0755

    - name: Run a jupyter notebook container
      docker_container:
        image: notebook:jupyter
        name: notebook
        state: started
        ports: "8888:8888"
        volumes:
          - /home/ccma/workspace:/home/jovyan/work
        env:
          NB_UID: "{{ get_uid.stdout }}"
          NB_GID: "{{ get_gid.stdout }}"

    - name: Execute commands in docker container
      shell: docker exec -i notebook /bin/bash -c 'jupyter notebook list'
      register: jupyter_notebook_list

    - name: Debug jupyter_notebook_list
      debug:
        var: jupyter_notebook_list
